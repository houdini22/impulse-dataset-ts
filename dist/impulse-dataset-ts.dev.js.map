{"version":3,"file":"impulse-dataset-ts.dev.js","mappings":"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","sources":["webpack://impulse-dataset-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-dataset-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-dataset-ts/./src/typescript/Computation/ComputationGPU.ts","webpack://impulse-dataset-ts/./src/typescript/Computation/index.ts","webpack://impulse-dataset-ts/./src/typescript/Computation/utils.ts","webpack://impulse-dataset-ts/./src/typescript/Dataset/Dataset.ts","webpack://impulse-dataset-ts/./src/typescript/Dataset/DatasetModifier/AbstractDatasetModifier.ts","webpack://impulse-dataset-ts/./src/typescript/Dataset/DatasetModifier/Callback.ts","webpack://impulse-dataset-ts/./src/typescript/Dataset/DatasetModifier/Category.ts","webpack://impulse-dataset-ts/./src/typescript/Dataset/DatasetModifier/MinMaxScaling.ts","webpack://impulse-dataset-ts/./src/typescript/Dataset/DatasetModifier/MissingData.ts","webpack://impulse-dataset-ts/./src/typescript/Dataset/DatasetModifier/Shuffle.ts","webpack://impulse-dataset-ts/./src/typescript/Dataset/DatasetModifier/index.ts","webpack://impulse-dataset-ts/./src/typescript/Dataset/DatasetVocabulary.ts","webpack://impulse-dataset-ts/./src/typescript/Dataset/index.ts","webpack://impulse-dataset-ts/./src/typescript/DatasetBuilder/DatasetBuilder.ts","webpack://impulse-dataset-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/AbstractDatasetBuilderSource.ts","webpack://impulse-dataset-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/DatasetBuilderSourceCSV.ts","webpack://impulse-dataset-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/index.ts","webpack://impulse-dataset-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilder.ts","webpack://impulse-dataset-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilderSource/AbstractDatasetVocabularyBuilderSource.ts","webpack://impulse-dataset-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilderSource/DatasetVocabularyBuilderSourceTextFile.ts","webpack://impulse-dataset-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilderSource/index.ts","webpack://impulse-dataset-ts/./src/typescript/DatasetBuilder/index.ts","webpack://impulse-dataset-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-dataset-ts/external commonjs2 \"csvtojson\"","webpack://impulse-dataset-ts/external node-commonjs \"fs\"","webpack://impulse-dataset-ts/webpack/bootstrap","webpack://impulse-dataset-ts/webpack/runtime/compat get default export","webpack://impulse-dataset-ts/webpack/runtime/define property getters","webpack://impulse-dataset-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-dataset-ts/webpack/runtime/make namespace object","webpack://impulse-dataset-ts/./src/typescript/main.ts"],"sourcesContent":["import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        log[row][col] = Math.log(predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const firstMatrix = elementWiseMultiply(new Matrix(predictions.rows, predictions.cols, log), output);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        sub[row][col] = 1.0 - output.data[row][col];\n      }\n    }\n  }\n  const toMultiply2 = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        data[row][col] = Math.log(1.0 - predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const toMultiply1 = new Matrix(predictions.rows, predictions.cols, data);\n\n  return add(\n    elementWiseMultiply(multiplyNumber(firstMatrix, -1), output),\n    elementWiseMultiply(multiplyNumber(toMultiply1, -1), subtractFromNumber(toMultiply2, 1))\n  ).sum();\n};\n\nexport const logisticBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  return logisticActivation(oldY).multiply(logisticActivation(oldY).minusOne());\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = (1 - Math.exp(-2 * m.data[row][col])) / (1 + Math.exp(-2 * m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.max(0.0, m.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < sigma.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < sigma.cols; col += 1) {\n      if (sigma.data) {\n        data[row][col] = oldY.data[row][col] > 0 ? 1 : 0;\n      }\n    }\n  }\n  return elementWiseMultiply(new Matrix(sigma.rows, sigma.cols, data), sigma);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.pow(m.data[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        data[row][col] = output.data[row][col] - Math.pow(predictions[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal. m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] + m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] - m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] * m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtractFromNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = num - m1.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const pow = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.pow(m1.data[row][col], pow);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const log = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(m1.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logMinusOne = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(1 - m1.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const addNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] + num;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      if (m.data) {\n        data[col][row] = m.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    /*this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);*/\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\nimport { setComputation, getComputation } from \"./utils\";\n\nexport { AbstractComputation, ComputationGPU, ComputationCPU, setComputation, getComputation };\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class Dataset {\n  public exampleSize = 0;\n  public numberOfExamples = 0;\n  public data: Matrix | null = null;\n\n  constructor(exampleSize: number = null, numberOfExamples: number = null, arr: string[][] | number[][] = null) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n\n    if (arr) {\n      const data = [];\n      for (let row = 0; row < exampleSize; row += 1) {\n        data[row] = new Array(numberOfExamples);\n        for (let col = 0; col < numberOfExamples; col += 1) {\n          if (typeof arr[row][col] === \"string\") {\n            // @ts-ignore\n            data[row][col] = arr[row][col].length ? arr[row][col] : NaN;\n          } else if (typeof arr[row][col] === \"number\") {\n            data[row][col] = arr[row][col];\n          } else {\n            data[row][col] = NaN;\n          }\n        }\n      }\n      this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n    }\n  }\n\n  static fromMatrix(m: Matrix): Dataset {\n    const instance = new Dataset();\n    instance.exampleSize = m.rows;\n    instance.numberOfExamples = m.cols;\n    instance.data = m;\n\n    return instance;\n  }\n\n  exampleAt(index: number): Matrix | null {\n    return this.data.col(index);\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getExampleSize(): number {\n    return this.exampleSize;\n  }\n\n  getBatch(offset: number, batchSize: number): Dataset {\n    const data = this.data.block(0, offset, this.data.rows, batchSize);\n    return Dataset.fromMatrix(data);\n  }\n\n  insertColumnAfter(column, size = 1) {\n    const oldData = this.data.copy();\n\n    this.data.resize(this.data.rows, this.data.cols + size);\n\n    for (let row = 0; row < this.data.rows; row += 1) {\n      for (let col = 0; col < this.data.cols; col += 1) {\n        if (col <= column) {\n          this.data.data[row][col] = oldData.data[row][col];\n        } else if (col > column && col < column + size) {\n          this.data.data[row][col] = undefined;\n        } else if (col >= column + size - 1) {\n          this.data.data[row][col] = oldData.data[row][col - size];\n        }\n      }\n    }\n  }\n}\n","import { Dataset } from \"../Dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  abstract apply(dataset: Dataset): Dataset;\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Dataset } from \"../Dataset\";\n\nexport class CallbackDatasetModifier extends AbstractDatasetModifier {\n  protected callback: (example: Matrix) => Matrix = (example) => example;\n\n  apply(): Dataset {\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.callback(this.dataset.exampleAt(exampleIndex));\n      for (let row = 0; row < this.dataset.data.rows; row += 1) {\n        if (example) {\n          this.dataset.data.data[row][exampleIndex] = example.data[row][0];\n        }\n      }\n    }\n    return this.dataset;\n  }\n\n  setCallback(callback: (example: Matrix) => Matrix): CallbackDatasetModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class CategoryDatasetModifier extends AbstractDatasetModifier {\n  protected columns: Array<number>;\n\n  constructor(columns: Array<number>) {\n    super(null);\n    this.columns = columns;\n  }\n\n  apply(dataset: Dataset): Dataset {\n    let size = 0;\n    let _dataset = dataset;\n\n    this.columns.forEach((column) => {\n      let [dataset, _size] = this.applyForColumn(_dataset, column + size);\n      // @ts-ignore\n      size += _size;\n      _dataset = dataset;\n    });\n    return dataset;\n  }\n\n  applyForColumn(dataset: Dataset, column: number): [Dataset, number] {\n    const example = dataset.data.col(column);\n    let values = [];\n\n    for (let row = 0; row < example.rows; row += 1) {\n      values.push(example.value(row, 0));\n    }\n    console.log(values);\n\n    values = values.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n\n    dataset.insertColumnAfter(column, values.length - 1);\n\n    for (let row = 0; row < dataset.data.rows; row += 1) {\n      const oldValue = dataset.data.data[row][column];\n      let index = 0;\n      for (let col = 0; col < column + values.length; col += 1) {\n        if (col >= column && col < column + values.length) {\n          if (index === values.indexOf(oldValue)) {\n            dataset.data.data[row][col] = 1;\n          } else {\n            dataset.data.data[row][col] = 0;\n          }\n          index += 1;\n        } else {\n          // dataset.data.data[row][col] = dataset.data.data[row][col];\n        }\n      }\n    }\n\n    return [dataset, values.length - 1];\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MinMaxScalingDatasetModifier extends AbstractDatasetModifier {\n  apply(dataset: Dataset): Dataset {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let col = 0; col < dataset.getNumberOfExamples(); col += 1) {\n      const example = dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        if (min > example.data[row][0]) {\n          min = example.data[row][0];\n        }\n        if (max < example.data[row][0]) {\n          max = example.data[row][0];\n        }\n      }\n    }\n\n    for (let col = 0; col < dataset.getNumberOfExamples(); col += 1) {\n      const example = dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        dataset.data.data[row][col] = (example.data[row][0] - min) / (max - min);\n      }\n    }\n\n    return dataset;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MissingDataScalingDatasetModifier extends AbstractDatasetModifier {\n  protected modificationType = \"mean\";\n\n  apply(dataset: Dataset): Dataset {\n    const rowsToFill = [];\n    let correctExamplesCount = 0;\n    let sum = 0;\n    let valueToFill = 0;\n\n    for (let exampleIndex = 0; exampleIndex < dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < dataset.getExampleSize(); row += 1) {\n        if (isNaN(example.data[row][0]) || typeof example.data[row][0] === \"undefined\") {\n          rowsToFill.push({\n            row,\n            col: example,\n          });\n        } else {\n          sum += example.data[row][0];\n          correctExamplesCount++;\n        }\n      }\n    }\n\n    if (this.modificationType === \"mean\") {\n      valueToFill = sum / correctExamplesCount;\n    }\n\n    rowsToFill.forEach(({ row, col }) => {\n      dataset.data.data[row][col] = valueToFill;\n    });\n\n    return dataset;\n  }\n\n  setModificationType(type: string): MissingDataScalingDatasetModifier {\n    this.modificationType = type;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class ShuffleDatasetModifier extends AbstractDatasetModifier {\n  public sortList: number[] = [];\n\n  constructor(dataset: Dataset) {\n    super(dataset);\n  }\n\n  apply(dataset: Dataset): Dataset {\n    let index = 0;\n    const data = Matrix.from(\n      dataset.data.transpose().data.sort((exampleA: number[], exampleB: number[]) => {\n        if (typeof this.sortList[index] === \"undefined\") {\n          // first run\n          this.sortList[index] = Math.random() - 0.5;\n        }\n        index += 1;\n        return this.sortList[index - 1];\n      })\n    ).transpose().data;\n    return new Dataset(dataset.getExampleSize(), dataset.getNumberOfExamples(), data);\n  }\n}\n","import { CallbackDatasetModifier } from \"./Callback\";\nimport { MinMaxScalingDatasetModifier } from \"./MinMaxScaling\";\nimport { MissingDataScalingDatasetModifier } from \"./MissingData\";\nimport { ShuffleDatasetModifier } from \"./Shuffle\";\nimport { CategoryDatasetModifier } from \"./Category\";\n\nexport {\n  CallbackDatasetModifier,\n  MinMaxScalingDatasetModifier,\n  MissingDataScalingDatasetModifier,\n  ShuffleDatasetModifier,\n  CategoryDatasetModifier,\n};\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class DatasetVocabulary {\n  public vocabularySize = 0;\n  public dataSize = 0;\n  public data: string = \"\";\n  public chars: string[];\n\n  constructor(str: string) {\n    this.data = str.toLowerCase();\n    const chars = [...new Set(this.data.split(\"\").sort())];\n\n    this.chars = chars;\n    this.dataSize = this.data.length;\n    this.vocabularySize = chars.length;\n  }\n\n  getExamples(): string[] {\n    return this.data\n      .replace(/\\n+/, \"\\n\")\n      .split(\"\\n\")\n      .map((example: string) => {\n        return example + \"\\n\";\n      });\n  }\n\n  getVocabularySize(): number {\n    return this.vocabularySize;\n  }\n\n  getCharsLength(): number {\n    return this.chars.length;\n  }\n\n  getCharIndices(): Object {\n    const result = {};\n    this.chars.forEach((char, i) => {\n      result[char] = i;\n    });\n    return result;\n  }\n\n  buildData(tx: number = 40, stride: number = 3) {\n    const X = [];\n    const Y = [];\n\n    for (let i = 0; i < this.data.length - tx; i += stride) {\n      X.push(this.data.substr(i, tx));\n      Y.push(this.data[i + tx]);\n    }\n\n    return [X, Y];\n  }\n\n  vectorization(X: string[], Y: string[], nx: number = 40): [Matrix[], Matrix] {\n    const m = X.length;\n    const x = new Array(m);\n    const chars = this.getCharIndices();\n    const y = new Matrix(m, this.chars.length).setZeros();\n    let xIndex = 0;\n    let rowIndex = 0;\n\n    X.forEach((sentence: string, _m) => {\n      x[_m] = new Matrix(sentence.length, this.chars.length).setZeros();\n      sentence.split(\"\").forEach((char, t) => {\n        x[_m].data[t][chars[char]] = 1;\n        rowIndex++;\n      });\n      xIndex++;\n      rowIndex = 0;\n\n      y.data[_m][chars[Y[_m]]] = 1;\n    });\n\n    return [x, y];\n  }\n\n  getChars(): string[] {\n    return this.chars;\n  }\n\n  getExampleX(exampleIndex: number): Matrix {\n    const example = this.getExamples()[exampleIndex];\n    const data = [];\n    example.split(\"\").forEach((ch, row) => {\n      data[row] = [this.getCharIndices()[ch]];\n    });\n    return Matrix.from(data);\n  }\n\n  getExampleY(exampleIndex: number): Matrix {\n    const example = this.getExamples()[exampleIndex];\n    const data = [];\n    example.split(\"\").forEach((ch, row) => {\n      data[row] = [this.getCharIndices()[ch]];\n    });\n    return Matrix.from(data);\n  }\n}\n","import { Dataset } from \"./Dataset\";\n\nexport { Dataset };\n","import { Dataset } from \"../Dataset\";\nimport { AbstractDatasetBuilderSource } from \"./DatasetBuilderSource/AbstractDatasetBuilderSource\";\n\ninterface ParametersInterface {\n  transpose?: boolean;\n}\n\nexport class DatasetBuilder {\n  static fromSource(\n    sourcePromise: Promise<AbstractDatasetBuilderSource>,\n    params: ParametersInterface = {}\n  ): Promise<Dataset> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const matrix = source.parse();\n        const numberOfExamples = matrix.rows;\n        const exampleSize = matrix.cols;\n\n        const dataset = new Dataset(\n          exampleSize,\n          numberOfExamples,\n          params?.transpose ? matrix.transpose().data : matrix.data\n        );\n        resolve(dataset);\n      });\n    });\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractDatasetBuilderSource {\n  abstract parse(): Matrix;\n}\n","import * as fs from \"fs\";\nimport { AbstractDatasetBuilderSource } from \"./AbstractDatasetBuilderSource\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"../../Dataset\";\n\nenum CSVState {\n  UnquotedField,\n  QuotedField,\n  QuotedQuote,\n}\n\nexport class DatasetBuilderSourceCSV extends AbstractDatasetBuilderSource {\n  protected data: number[][] | string[][] | null = null;\n  protected matrixData: number[][] | string[][] = null;\n\n  constructor(data: number[][] | string[][]) {\n    super();\n    this.data = data;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetBuilderSourceCSV> {\n    /*return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        console.log(\"first\");\n        if (err) {\n          console.log(err);\n          reject();\n        } else {\n          const instance = new DatasetBuilderSourceCSV(buffer.toString(\"utf-8\"));\n          resolve(instance);\n        }\n      });\n    });*/\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(path)\n        .then((arr) => {\n          resolve(new DatasetBuilderSourceCSV(arr));\n        });\n    });\n  }\n\n  parse(): Matrix {\n    /*this.matrixData = [];\n\n    const lines = this.contentStr.trim().split(/\\n+/);\n    lines.forEach((line, i) => this.parseLine(line.trim(), i));\n\n    return new Matrix(this.matrixData.length, this.matrixData[0].length, this.matrixData);*/\n\n    const numberOfExamples = this.data.length;\n    const exampleSize = this.data[0].length;\n\n    return new Matrix(numberOfExamples, exampleSize, this.data).transpose();\n  }\n  /*\n  protected parseLine(line: string, exampleIndexCol: number): void {\n    let state = CSVState.UnquotedField;\n    const fields = [];\n    let i = 0;\n\n    for (let j = 0; j < line.length; j += 1) {\n      const c = line.at(j);\n      switch (state) {\n        case CSVState.UnquotedField:\n          switch (c) {\n            case \",\": // end of field\n              fields.push(\"\");\n              i++;\n              break;\n            case '\"':\n              state = CSVState.QuotedField;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedField:\n          switch (c) {\n            case '\"':\n              state = CSVState.QuotedQuote;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedQuote:\n          switch (c) {\n            case \",\": // , after closing quote\n              fields.push(\"\");\n              i++;\n              state = CSVState.UnquotedField;\n              break;\n            case '\"': // \"\" -> \"\n              fields[i] += '\"';\n              state = CSVState.QuotedField;\n              break;\n            default:\n              // end of quote\n              state = CSVState.UnquotedField;\n              break;\n          }\n          break;\n      }\n\n      fields.forEach((value, row) => {\n        if (value.length === 0) {\n          value = NaN;\n        }\n        value = parseFloat(value);\n        if (!this.matrixData[row]) {\n          this.matrixData[row] = [];\n        }\n        this.matrixData[row][exampleIndexCol] = value;\n      });\n    }\n  }*/\n}\n","import { DatasetBuilderSourceCSV } from \"./DatasetBuilderSourceCSV\";\n\nexport { DatasetBuilderSourceCSV };\n","import { AbstractDatasetVocabularyBuilderSource } from \"./DatasetVocabularyBuilderSource/AbstractDatasetVocabularyBuilderSource\";\nimport { DatasetVocabulary } from \"../Dataset/DatasetVocabulary\";\n\nexport class DatasetVocabularyBuilder {\n  static fromSource(sourcePromise: Promise<AbstractDatasetVocabularyBuilderSource>): Promise<DatasetVocabulary> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const str = source.parse();\n        resolve(new DatasetVocabulary(str));\n      });\n    });\n  }\n}\n","export abstract class AbstractDatasetVocabularyBuilderSource {\n  abstract parse(): string;\n}\n","import * as fs from \"fs\";\nimport { AbstractDatasetVocabularyBuilderSource } from \"./AbstractDatasetVocabularyBuilderSource\";\n\nexport class DatasetVocabularyBuilderSourceTextFile extends AbstractDatasetVocabularyBuilderSource {\n  protected data: string = \"\";\n\n  constructor(data: string) {\n    super();\n    this.data = data;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetVocabularyBuilderSourceTextFile> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(new DatasetVocabularyBuilderSourceTextFile(buffer.toString(\"utf-8\")));\n      });\n    });\n  }\n\n  parse(): string {\n    return this.data;\n  }\n}\n","import { DatasetVocabularyBuilderSourceTextFile } from \"./DatasetVocabularyBuilderSourceTextFile\";\n\nexport { DatasetVocabularyBuilderSourceTextFile };\n","import { DatasetBuilder } from \"./DatasetBuilder\";\nimport { DatasetVocabularyBuilder } from \"./DatasetVocabularyBuilder\";\n\nexport { DatasetBuilder, DatasetVocabularyBuilder };\n","import { getComputation } from \"../Computation\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = new Array(this.rows);\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else {\n          if (typeof arr[row][col] === \"string\") {\n            if (/^[0-9.]+$/.test(String(arr[row][col]))) {\n              data[row][col] = Number(arr[row][col]);\n            } else {\n              data[row][col] = arr[row][col];\n            }\n          } else {\n            data[row][col] = arr[row][col];\n          }\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  flatten(): number[] {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data.push(this.data[row][col]);\n      }\n    }\n    return data;\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      const newData = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = this.data[row][0];\n        }\n      }\n      return Matrix.from(newData);\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      const newData = [];\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = this.data[0][col];\n        }\n      }\n      return Matrix.from(newData);\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  rowMaxCoeffIndex(row: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.cols; col += 1) {\n      if (this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = col;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  row(row: number): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      data[col] = [this.data[row][col]];\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  sigmoid() {\n    return this.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row] = [];\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  abs(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.abs(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  mean() {\n    let sum = 0;\n    const numberOfElements = this.rows * this.cols;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n\n    return sum / numberOfElements;\n  }\n\n  max(): number {\n    let max = -Infinity;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        max = Math.max(this.data[row][col], max);\n      }\n    }\n    return max;\n  }\n\n  setMax(max: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.min(this.data[row][col], max);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setMin(min: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.max(this.data[row][col], min);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setZeros(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 0;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setOnes(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setRandom(parameter: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  fraction(num: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num / this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  sqrt(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.sqrt(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"multiply\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || this.cols !== num.cols) {\n        throw new Error(`Dimension error: ${this.shape()} !== ${num.shape()}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    if (m instanceof Matrix) {\n      if (this.rows !== m.rows || this.cols !== m.cols) {\n        throw new Error(`Dimensions error: ${this.rows}, ${this.cols} !== ${m.rows}, ${m.cols}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m;\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  forEach(cb: (num: number) => number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = cb(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  shape(): number[] {\n    return [this.rows, this.cols];\n  }\n\n  divide(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || num.cols !== this.cols) {\n        throw new Error(`Dimensions error (${this.rows}, ${this.cols}) !== (${num.rows}, ${num.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  minusOne(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1 - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  subtractFromNumber(num: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  add(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m;\n        }\n      }\n      return Matrix.from(data);\n    } else if (m instanceof Matrix) {\n      if (m.rows !== this.rows || m.cols !== this.cols) {\n        throw new Error(`Dimention error: rows (x: ${this.rows}, y: ${this.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n    return this;\n  }\n\n  log(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.log(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  tanh(): Matrix {\n    return this.exp()\n      .subtract(this.multiply(-1).exp())\n      .divide(this.exp().add(this.multiply(-1).exp()));\n  }\n\n  softmax(): Matrix {\n    const max = this.max() - 1e-8;\n    return this.subtract(max).exp().divide(this.rowwiseSum().replicate(this.cols, 1).transpose());\n  }\n\n  exp(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.exp(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  pow(num): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.pow(this.data[row][col], num);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  value(row, col, value = undefined) {\n    if (value === undefined) {\n      return this.data[row][col];\n    }\n    this.data[row][col] = value;\n    return this;\n  }\n\n  copy() {\n    return Matrix.from(this.data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n}\n","module.exports = require(\"csvtojson\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Dataset as DatasetDataset } from \"./Dataset\";\nimport { DatasetBuilder as DatasetBuilderBuilder, DatasetVocabularyBuilder } from \"./DatasetBuilder\";\nimport { DatasetBuilderSourceCSV } from \"./DatasetBuilder/DatasetBuilderSource\";\nimport { DatasetVocabularyBuilderSourceTextFile } from \"./DatasetBuilder/DatasetVocabularyBuilderSource\";\n\nimport {\n  CallbackDatasetModifier,\n  MinMaxScalingDatasetModifier,\n  MissingDataScalingDatasetModifier,\n  ShuffleDatasetModifier,\n  CategoryDatasetModifier,\n} from \"./Dataset/DatasetModifier\";\n\nconst DatasetBuilder = {\n  DatasetBuilder: DatasetBuilderBuilder,\n  DatasetVocabularyBuilder,\n};\nconst Dataset = {\n  Dataset: DatasetDataset,\n};\nconst DatasetModifier = {\n  CallbackDatasetModifier,\n  MinMaxScalingDatasetModifier,\n  MissingDataScalingDatasetModifier,\n  ShuffleDatasetModifier,\n  CategoryDatasetModifier,\n};\nconst DatasetBuilderSource = {\n  DatasetBuilderSourceCSV,\n  DatasetVocabularyBuilderSourceTextFile,\n};\n\nexport { DatasetBuilder, Dataset, DatasetBuilderSource, DatasetModifier };\n"],"names":["AbstractComputation","name","func","kernels","Error","args","apply","Matrix","elementWiseDivide","m1","m2","rows","cols","data","row","col","divideNumber","num","logisticActivation","m","Math","exp","from","logisticLoss","output","predictions","log","epsilon","firstMatrix","elementWiseMultiply","sub","toMultiply2","toMultiply1","add","multiplyNumber","subtractFromNumber","sum","logisticBackpropagation","sigma","oldY","multiply","minusOne","tanhActivation","reluActivation","max","reluBackpropagation","softplusActivation","penalty","pow","sqrt","purelinLoss","dot","Array","i","subtract","fillRandom","parameter","random","fillZeros","setOnes","logMinusOne","addNumber","transpose","ComputationCPU","addKernel","ComputationGPU","setComputation","getComputation","currentComputation","type","Dataset","exampleSize","numberOfExamples","arr","length","NaN","index","offset","batchSize","block","fromMatrix","column","size","oldData","copy","resize","undefined","instance","AbstractDatasetModifier","dataset","CallbackDatasetModifier","example","exampleIndex","getNumberOfExamples","callback","exampleAt","CategoryDatasetModifier","columns","_dataset","forEach","applyForColumn","_size","values","push","value","console","filter","self","indexOf","insertColumnAfter","oldValue","MinMaxScalingDatasetModifier","min","Infinity","MissingDataScalingDatasetModifier","rowsToFill","correctExamplesCount","valueToFill","getExampleSize","isNaN","modificationType","ShuffleDatasetModifier","sort","exampleA","exampleB","sortList","DatasetVocabulary","str","toLowerCase","chars","Set","split","dataSize","vocabularySize","replace","map","result","char","tx","stride","X","Y","substr","nx","x","getCharIndices","y","setZeros","xIndex","rowIndex","sentence","_m","t","getExamples","ch","DatasetBuilder","sourcePromise","params","Promise","resolve","then","source","matrix","parse","AbstractDatasetBuilderSource","csvtojson","CSVState","DatasetBuilderSourceCSV","path","noheader","fromFile","DatasetVocabularyBuilder","AbstractDatasetVocabularyBuilderSource","fs","DatasetVocabularyBuilderSourceTextFile","reject","readFile","err","buffer","toString","generateData","test","String","Number","newData","execute","maxIndex","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","fraction","_row","abs","numberOfElements","shape","cb","divide","rowwiseSum","replicate","DatasetDataset","DatasetBuilderBuilder","DatasetModifier","DatasetBuilderSource"],"sourceRoot":""}