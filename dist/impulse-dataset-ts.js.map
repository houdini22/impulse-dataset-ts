{"version":3,"file":"impulse-dataset-ts.js","mappings":"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","sources":["webpack://impulse-dataset-ts/webpack/bootstrap","webpack://impulse-dataset-ts/webpack/runtime/define property getters","webpack://impulse-dataset-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-dataset-ts/webpack/runtime/make namespace object","webpack://impulse-dataset-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-dataset-ts/./src/typescript/Computation/utils.ts","webpack://impulse-dataset-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-dataset-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-dataset-ts/./src/typescript/Dataset/Dataset.ts","webpack://impulse-dataset-ts/./src/typescript/DatasetBuilder/DatasetBuilder.ts","webpack://impulse-dataset-ts/./src/typescript/Dataset/DatasetVocabulary.ts","webpack://impulse-dataset-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilder.ts","webpack://impulse-dataset-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/AbstractDatasetBuilderSource.ts","webpack://impulse-dataset-ts/external commonjs2 \"csvtojson\"","webpack://impulse-dataset-ts/./src/typescript/DatasetBuilder/DatasetBuilderSource/DatasetBuilderSourceCSV.ts","webpack://impulse-dataset-ts/external node-commonjs \"fs\"","webpack://impulse-dataset-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilderSource/DatasetVocabularyBuilderSourceTextFile.ts","webpack://impulse-dataset-ts/./src/typescript/DatasetBuilder/DatasetVocabularyBuilderSource/AbstractDatasetVocabularyBuilderSource.ts","webpack://impulse-dataset-ts/./src/typescript/Dataset/DatasetModifier/AbstractDatasetModifier.ts","webpack://impulse-dataset-ts/./src/typescript/Dataset/DatasetModifier/Callback.ts","webpack://impulse-dataset-ts/./src/typescript/Dataset/DatasetModifier/MinMaxScaling.ts","webpack://impulse-dataset-ts/./src/typescript/Dataset/DatasetModifier/MissingData.ts","webpack://impulse-dataset-ts/./src/typescript/Dataset/DatasetModifier/Shuffle.ts","webpack://impulse-dataset-ts/./src/typescript/Dataset/DatasetModifier/Category.ts","webpack://impulse-dataset-ts/./src/typescript/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        log[row][col] = Math.log(predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const firstMatrix = elementWiseMultiply(new Matrix(predictions.rows, predictions.cols, log), output);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        sub[row][col] = 1.0 - output.data[row][col];\n      }\n    }\n  }\n  const toMultiply2 = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        data[row][col] = Math.log(1.0 - predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const toMultiply1 = new Matrix(predictions.rows, predictions.cols, data);\n\n  return add(\n    elementWiseMultiply(multiplyNumber(firstMatrix, -1), output),\n    elementWiseMultiply(multiplyNumber(toMultiply1, -1), subtractFromNumber(toMultiply2, 1))\n  ).sum();\n};\n\nexport const logisticBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  return logisticActivation(oldY).multiply(logisticActivation(oldY).minusOne());\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = (1 - Math.exp(-2 * m.data[row][col])) / (1 + Math.exp(-2 * m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.max(0.0, m.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < sigma.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < sigma.cols; col += 1) {\n      if (sigma.data) {\n        data[row][col] = oldY.data[row][col] > 0 ? 1 : 0;\n      }\n    }\n  }\n  return elementWiseMultiply(new Matrix(sigma.rows, sigma.cols, data), sigma);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.pow(m.data[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        data[row][col] = output.data[row][col] - Math.pow(predictions[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal. m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] + m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] - m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] * m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtractFromNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = num - m1.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const pow = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.pow(m1.data[row][col], pow);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const log = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(m1.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logMinusOne = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(1 - m1.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const addNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] + num;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      if (m.data) {\n        data[col][row] = m.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { getComputation } from \"../Computation\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = new Array(this.rows);\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else {\n          if (typeof arr[row][col] === \"string\") {\n            if (/^[0-9.]+$/.test(String(arr[row][col]))) {\n              data[row][col] = Number(arr[row][col]);\n            } else {\n              data[row][col] = arr[row][col];\n            }\n          } else {\n            data[row][col] = arr[row][col];\n          }\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  flatten(): number[] {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data.push(this.data[row][col]);\n      }\n    }\n    return data;\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      const newData = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = this.data[row][0];\n        }\n      }\n      return Matrix.from(newData);\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      const newData = [];\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = this.data[0][col];\n        }\n      }\n      return Matrix.from(newData);\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  rowMaxCoeffIndex(row: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.cols; col += 1) {\n      if (this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = col;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  row(row: number): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      data[col] = [this.data[row][col]];\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  sigmoid() {\n    return this.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row] = [];\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  abs(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.abs(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  mean() {\n    let sum = 0;\n    const numberOfElements = this.rows * this.cols;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n\n    return sum / numberOfElements;\n  }\n\n  max(): number {\n    let max = -Infinity;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        max = Math.max(this.data[row][col], max);\n      }\n    }\n    return max;\n  }\n\n  setMax(max: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.min(this.data[row][col], max);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setMin(min: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.max(this.data[row][col], min);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setZeros(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 0;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setOnes(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setRandom(parameter: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  fraction(num: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num / this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  sqrt(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.sqrt(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"multiply\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || this.cols !== num.cols) {\n        throw new Error(`Dimension error: ${this.shape()} !== ${num.shape()}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    if (m instanceof Matrix) {\n      if (this.rows !== m.rows || this.cols !== m.cols) {\n        throw new Error(`Dimensions error: ${this.rows}, ${this.cols} !== ${m.rows}, ${m.cols}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m;\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  forEach(cb: (num: number) => number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = cb(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  shape(): number[] {\n    return [this.rows, this.cols];\n  }\n\n  divide(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || num.cols !== this.cols) {\n        throw new Error(`Dimensions error (${this.rows}, ${this.cols}) !== (${num.rows}, ${num.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  minusOne(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1 - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  subtractFromNumber(num: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  add(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m;\n        }\n      }\n      return Matrix.from(data);\n    } else if (m instanceof Matrix) {\n      if (m.rows !== this.rows || m.cols !== this.cols) {\n        throw new Error(`Dimention error: rows (x: ${this.rows}, y: ${this.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n    return this;\n  }\n\n  log(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.log(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  tanh(): Matrix {\n    return this.exp()\n      .subtract(this.multiply(-1).exp())\n      .divide(this.exp().add(this.multiply(-1).exp()));\n  }\n\n  softmax(): Matrix {\n    const max = this.max() - 1e-8;\n    return this.subtract(max).exp().divide(this.rowwiseSum().replicate(this.cols, 1).transpose());\n  }\n\n  exp(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.exp(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  pow(num): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.pow(this.data[row][col], num);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  value(row, col, value = undefined) {\n    if (value === undefined) {\n      return this.data[row][col];\n    }\n    this.data[row][col] = value;\n    return this;\n  }\n\n  copy() {\n    return Matrix.from(this.data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n}\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class Dataset {\n  public exampleSize = 0;\n  public numberOfExamples = 0;\n  public data: Matrix | null = null;\n\n  constructor(exampleSize: number = null, numberOfExamples: number = null, arr: string[][] | number[][] = null) {\n    this.exampleSize = exampleSize;\n    this.numberOfExamples = numberOfExamples;\n\n    if (arr) {\n      const data = [];\n      for (let row = 0; row < exampleSize; row += 1) {\n        data[row] = new Array(numberOfExamples);\n        for (let col = 0; col < numberOfExamples; col += 1) {\n          if (typeof arr[row][col] === \"string\") {\n            // @ts-ignore\n            data[row][col] = arr[row][col].length ? arr[row][col] : NaN;\n          } else if (typeof arr[row][col] === \"number\") {\n            data[row][col] = arr[row][col];\n          } else {\n            data[row][col] = NaN;\n          }\n        }\n      }\n      this.data = new Matrix(this.exampleSize, this.numberOfExamples, data);\n    }\n  }\n\n  static fromMatrix(m: Matrix): Dataset {\n    const instance = new Dataset();\n    instance.exampleSize = m.rows;\n    instance.numberOfExamples = m.cols;\n    instance.data = m;\n\n    return instance;\n  }\n\n  exampleAt(index: number): Matrix | null {\n    return this.data.col(index);\n  }\n\n  getNumberOfExamples(): number {\n    return this.numberOfExamples;\n  }\n\n  getExampleSize(): number {\n    return this.exampleSize;\n  }\n\n  getBatch(offset: number, batchSize: number): Dataset {\n    const data = this.data.block(0, offset, this.data.rows, batchSize);\n    return Dataset.fromMatrix(data);\n  }\n\n  insertColumnAfter(column, size = 1) {\n    const oldData = this.data.copy();\n\n    this.data.resize(this.data.rows, this.data.cols + size);\n\n    for (let row = 0; row < this.data.rows; row += 1) {\n      for (let col = 0; col < this.data.cols; col += 1) {\n        if (col <= column) {\n          this.data.data[row][col] = oldData.data[row][col];\n        } else if (col > column && col < column + size) {\n          this.data.data[row][col] = undefined;\n        } else if (col >= column + size - 1) {\n          this.data.data[row][col] = oldData.data[row][col - size];\n        }\n      }\n    }\n  }\n}\n","import { Dataset } from \"../Dataset\";\nimport { AbstractDatasetBuilderSource } from \"./DatasetBuilderSource/AbstractDatasetBuilderSource\";\n\ninterface ParametersInterface {\n  transpose?: boolean;\n}\n\nexport class DatasetBuilder {\n  static fromSource(\n    sourcePromise: Promise<AbstractDatasetBuilderSource>,\n    params: ParametersInterface = {}\n  ): Promise<Dataset> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const matrix = source.parse();\n        const numberOfExamples = matrix.rows;\n        const exampleSize = matrix.cols;\n\n        const dataset = new Dataset(\n          exampleSize,\n          numberOfExamples,\n          params?.transpose ? matrix.transpose().data : matrix.data\n        );\n        resolve(dataset);\n      });\n    });\n  }\n}\n","import { Matrix } from \"../Math/Matrix\";\n\nexport class DatasetVocabulary {\n  public vocabularySize = 0;\n  public dataSize = 0;\n  public data: string = \"\";\n  public chars: string[];\n\n  constructor(str: string) {\n    this.data = str.toLowerCase();\n    const chars = [...new Set(this.data.split(\"\").sort())];\n\n    this.chars = chars;\n    this.dataSize = this.data.length;\n    this.vocabularySize = chars.length;\n  }\n\n  getExamples(): string[] {\n    return this.data\n      .replace(/\\n+/, \"\\n\")\n      .split(\"\\n\")\n      .map((example: string) => {\n        return example + \"\\n\";\n      });\n  }\n\n  getVocabularySize(): number {\n    return this.vocabularySize;\n  }\n\n  getCharsLength(): number {\n    return this.chars.length;\n  }\n\n  getCharIndices(): Object {\n    const result = {};\n    this.chars.forEach((char, i) => {\n      result[char] = i;\n    });\n    return result;\n  }\n\n  buildData(tx: number = 40, stride: number = 3) {\n    const X = [];\n    const Y = [];\n\n    for (let i = 0; i < this.data.length - tx; i += stride) {\n      X.push(this.data.substr(i, tx));\n      Y.push(this.data[i + tx]);\n    }\n\n    return [X, Y];\n  }\n\n  vectorization(X: string[], Y: string[], nx: number = 40): [Matrix[], Matrix] {\n    const m = X.length;\n    const x = new Array(m);\n    const chars = this.getCharIndices();\n    const y = new Matrix(m, this.chars.length).setZeros();\n    let xIndex = 0;\n    let rowIndex = 0;\n\n    X.forEach((sentence: string, _m) => {\n      x[_m] = new Matrix(sentence.length, this.chars.length).setZeros();\n      sentence.split(\"\").forEach((char, t) => {\n        x[_m].data[t][chars[char]] = 1;\n        rowIndex++;\n      });\n      xIndex++;\n      rowIndex = 0;\n\n      y.data[_m][chars[Y[_m]]] = 1;\n    });\n\n    return [x, y];\n  }\n\n  getChars(): string[] {\n    return this.chars;\n  }\n\n  getExampleX(exampleIndex: number): Matrix {\n    const example = this.getExamples()[exampleIndex];\n    const data = [];\n    example.split(\"\").forEach((ch, row) => {\n      data[row] = [this.getCharIndices()[ch]];\n    });\n    return Matrix.from(data);\n  }\n\n  getExampleY(exampleIndex: number): Matrix {\n    const example = this.getExamples()[exampleIndex];\n    const data = [];\n    example.split(\"\").forEach((ch, row) => {\n      data[row] = [this.getCharIndices()[ch]];\n    });\n    return Matrix.from(data);\n  }\n}\n","import { AbstractDatasetVocabularyBuilderSource } from \"./DatasetVocabularyBuilderSource/AbstractDatasetVocabularyBuilderSource\";\nimport { DatasetVocabulary } from \"../Dataset/DatasetVocabulary\";\n\nexport class DatasetVocabularyBuilder {\n  static fromSource(sourcePromise: Promise<AbstractDatasetVocabularyBuilderSource>): Promise<DatasetVocabulary> {\n    return new Promise((resolve) => {\n      sourcePromise.then((source) => {\n        const str = source.parse();\n        resolve(new DatasetVocabulary(str));\n      });\n    });\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport abstract class AbstractDatasetBuilderSource {\n  abstract parse(): Matrix;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"csvtojson\");","import * as fs from \"fs\";\nimport { AbstractDatasetBuilderSource } from \"./AbstractDatasetBuilderSource\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport * as csvtojson from \"csvtojson\";\nimport { Dataset } from \"../../Dataset\";\n\nenum CSVState {\n  UnquotedField,\n  QuotedField,\n  QuotedQuote,\n}\n\nexport class DatasetBuilderSourceCSV extends AbstractDatasetBuilderSource {\n  protected data: number[][] | string[][] | null = null;\n  protected matrixData: number[][] | string[][] = null;\n\n  constructor(data: number[][] | string[][]) {\n    super();\n    this.data = data;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetBuilderSourceCSV> {\n    /*return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        console.log(\"first\");\n        if (err) {\n          console.log(err);\n          reject();\n        } else {\n          const instance = new DatasetBuilderSourceCSV(buffer.toString(\"utf-8\"));\n          resolve(instance);\n        }\n      });\n    });*/\n    return new Promise((resolve) => {\n      csvtojson({\n        noheader: true,\n        output: \"csv\",\n      })\n        .fromFile(path)\n        .then((arr) => {\n          resolve(new DatasetBuilderSourceCSV(arr));\n        });\n    });\n  }\n\n  parse(): Matrix {\n    /*this.matrixData = [];\n\n    const lines = this.contentStr.trim().split(/\\n+/);\n    lines.forEach((line, i) => this.parseLine(line.trim(), i));\n\n    return new Matrix(this.matrixData.length, this.matrixData[0].length, this.matrixData);*/\n\n    const numberOfExamples = this.data.length;\n    const exampleSize = this.data[0].length;\n\n    return new Matrix(numberOfExamples, exampleSize, this.data).transpose();\n  }\n  /*\n  protected parseLine(line: string, exampleIndexCol: number): void {\n    let state = CSVState.UnquotedField;\n    const fields = [];\n    let i = 0;\n\n    for (let j = 0; j < line.length; j += 1) {\n      const c = line.at(j);\n      switch (state) {\n        case CSVState.UnquotedField:\n          switch (c) {\n            case \",\": // end of field\n              fields.push(\"\");\n              i++;\n              break;\n            case '\"':\n              state = CSVState.QuotedField;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedField:\n          switch (c) {\n            case '\"':\n              state = CSVState.QuotedQuote;\n              break;\n            default:\n              fields[i] += c;\n              break;\n          }\n          break;\n        case CSVState.QuotedQuote:\n          switch (c) {\n            case \",\": // , after closing quote\n              fields.push(\"\");\n              i++;\n              state = CSVState.UnquotedField;\n              break;\n            case '\"': // \"\" -> \"\n              fields[i] += '\"';\n              state = CSVState.QuotedField;\n              break;\n            default:\n              // end of quote\n              state = CSVState.UnquotedField;\n              break;\n          }\n          break;\n      }\n\n      fields.forEach((value, row) => {\n        if (value.length === 0) {\n          value = NaN;\n        }\n        value = parseFloat(value);\n        if (!this.matrixData[row]) {\n          this.matrixData[row] = [];\n        }\n        this.matrixData[row][exampleIndexCol] = value;\n      });\n    }\n  }*/\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","import * as fs from \"fs\";\nimport { AbstractDatasetVocabularyBuilderSource } from \"./AbstractDatasetVocabularyBuilderSource\";\n\nexport class DatasetVocabularyBuilderSourceTextFile extends AbstractDatasetVocabularyBuilderSource {\n  protected data: string = \"\";\n\n  constructor(data: string) {\n    super();\n    this.data = data;\n  }\n\n  static fromLocalFile(path: string): Promise<DatasetVocabularyBuilderSourceTextFile> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(path, (err, buffer) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(new DatasetVocabularyBuilderSourceTextFile(buffer.toString(\"utf-8\")));\n      });\n    });\n  }\n\n  parse(): string {\n    return this.data;\n  }\n}\n","export abstract class AbstractDatasetVocabularyBuilderSource {\n  abstract parse(): string;\n}\n","import { Dataset } from \"../Dataset\";\n\nexport abstract class AbstractDatasetModifier {\n  protected dataset: Dataset = null;\n\n  constructor(dataset: Dataset) {\n    this.dataset = dataset;\n  }\n\n  abstract apply(dataset: Dataset): Dataset;\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Matrix } from \"../../Math/Matrix\";\nimport { Dataset } from \"../Dataset\";\n\nexport class CallbackDatasetModifier extends AbstractDatasetModifier {\n  protected callback: (example: Matrix) => Matrix = (example) => example;\n\n  apply(): Dataset {\n    for (let exampleIndex = 0; exampleIndex < this.dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = this.callback(this.dataset.exampleAt(exampleIndex));\n      for (let row = 0; row < this.dataset.data.rows; row += 1) {\n        if (example) {\n          this.dataset.data.data[row][exampleIndex] = example.data[row][0];\n        }\n      }\n    }\n    return this.dataset;\n  }\n\n  setCallback(callback: (example: Matrix) => Matrix): CallbackDatasetModifier {\n    this.callback = callback;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MinMaxScalingDatasetModifier extends AbstractDatasetModifier {\n  apply(dataset: Dataset): Dataset {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let col = 0; col < dataset.getNumberOfExamples(); col += 1) {\n      const example = dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        if (min > example.data[row][0]) {\n          min = example.data[row][0];\n        }\n        if (max < example.data[row][0]) {\n          max = example.data[row][0];\n        }\n      }\n    }\n\n    for (let col = 0; col < dataset.getNumberOfExamples(); col += 1) {\n      const example = dataset.exampleAt(col);\n      for (let row = 0; row < example.rows; row += 1) {\n        dataset.data.data[row][col] = (example.data[row][0] - min) / (max - min);\n      }\n    }\n\n    return dataset;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class MissingDataScalingDatasetModifier extends AbstractDatasetModifier {\n  protected modificationType = \"mean\";\n\n  apply(dataset: Dataset): Dataset {\n    const rowsToFill = [];\n    let correctExamplesCount = 0;\n    let sum = 0;\n    let valueToFill = 0;\n\n    for (let exampleIndex = 0; exampleIndex < dataset.getNumberOfExamples(); exampleIndex += 1) {\n      const example = dataset.exampleAt(exampleIndex);\n      for (let row = 0; row < dataset.getExampleSize(); row += 1) {\n        if (isNaN(example.data[row][0]) || typeof example.data[row][0] === \"undefined\") {\n          rowsToFill.push({\n            row,\n            col: example,\n          });\n        } else {\n          sum += example.data[row][0];\n          correctExamplesCount++;\n        }\n      }\n    }\n\n    if (this.modificationType === \"mean\") {\n      valueToFill = sum / correctExamplesCount;\n    }\n\n    rowsToFill.forEach(({ row, col }) => {\n      dataset.data.data[row][col] = valueToFill;\n    });\n\n    return dataset;\n  }\n\n  setModificationType(type: string): MissingDataScalingDatasetModifier {\n    this.modificationType = type;\n    return this;\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport class ShuffleDatasetModifier extends AbstractDatasetModifier {\n  public sortList: number[] = [];\n\n  constructor(dataset: Dataset) {\n    super(dataset);\n  }\n\n  apply(dataset: Dataset): Dataset {\n    let index = 0;\n    const data = Matrix.from(\n      dataset.data.transpose().data.sort((exampleA: number[], exampleB: number[]) => {\n        if (typeof this.sortList[index] === \"undefined\") {\n          // first run\n          this.sortList[index] = Math.random() - 0.5;\n        }\n        index += 1;\n        return this.sortList[index - 1];\n      })\n    ).transpose().data;\n    return new Dataset(dataset.getExampleSize(), dataset.getNumberOfExamples(), data);\n  }\n}\n","import { AbstractDatasetModifier } from \"./AbstractDatasetModifier\";\nimport { Dataset } from \"../Dataset\";\n\nexport class CategoryDatasetModifier extends AbstractDatasetModifier {\n  protected columns: Array<number>;\n\n  constructor(columns: Array<number>) {\n    super(null);\n    this.columns = columns;\n  }\n\n  apply(dataset: Dataset): Dataset {\n    let size = 0;\n    let _dataset = dataset;\n\n    this.columns.forEach((column) => {\n      let [dataset, _size] = this.applyForColumn(_dataset, column + size);\n      // @ts-ignore\n      size += _size;\n      _dataset = dataset;\n    });\n    return dataset;\n  }\n\n  applyForColumn(dataset: Dataset, column: number): [Dataset, number] {\n    const example = dataset.data.col(column);\n    let values = [];\n\n    for (let row = 0; row < example.rows; row += 1) {\n      values.push(example.value(row, 0));\n    }\n    console.log(values);\n\n    values = values.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n\n    dataset.insertColumnAfter(column, values.length - 1);\n\n    for (let row = 0; row < dataset.data.rows; row += 1) {\n      const oldValue = dataset.data.data[row][column];\n      let index = 0;\n      for (let col = 0; col < column + values.length; col += 1) {\n        if (col >= column && col < column + values.length) {\n          if (index === values.indexOf(oldValue)) {\n            dataset.data.data[row][col] = 1;\n          } else {\n            dataset.data.data[row][col] = 0;\n          }\n          index += 1;\n        } else {\n          // dataset.data.data[row][col] = dataset.data.data[row][col];\n        }\n      }\n    }\n\n    return [dataset, values.length - 1];\n  }\n}\n","import { Dataset as DatasetDataset } from \"./Dataset\";\nimport { DatasetBuilder as DatasetBuilderBuilder, DatasetVocabularyBuilder } from \"./DatasetBuilder\";\nimport { DatasetBuilderSourceCSV } from \"./DatasetBuilder/DatasetBuilderSource\";\nimport { DatasetVocabularyBuilderSourceTextFile } from \"./DatasetBuilder/DatasetVocabularyBuilderSource\";\n\nimport {\n  CallbackDatasetModifier,\n  MinMaxScalingDatasetModifier,\n  MissingDataScalingDatasetModifier,\n  ShuffleDatasetModifier,\n  CategoryDatasetModifier,\n} from \"./Dataset/DatasetModifier\";\n\nconst DatasetBuilder = {\n  DatasetBuilder: DatasetBuilderBuilder,\n  DatasetVocabularyBuilder,\n};\nconst Dataset = {\n  Dataset: DatasetDataset,\n};\nconst DatasetModifier = {\n  CallbackDatasetModifier,\n  MinMaxScalingDatasetModifier,\n  MissingDataScalingDatasetModifier,\n  ShuffleDatasetModifier,\n  CategoryDatasetModifier,\n};\nconst DatasetBuilderSource = {\n  DatasetBuilderSourceCSV,\n  DatasetVocabularyBuilderSourceTextFile,\n};\n\nexport { DatasetBuilder, Dataset, DatasetBuilderSource, DatasetModifier };\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","elementWiseDivide","m1","m2","rows","Error","cols","data","row","col","Matrix","divideNumber","num","logisticActivation","m","Math","exp","logisticLoss","output","predictions","log","firstMatrix","elementWiseMultiply","sub","toMultiply2","toMultiply1","add","multiplyNumber","subtractFromNumber","sum","logisticBackpropagation","sigma","oldY","multiply","minusOne","tanhActivation","reluActivation","max","reluBackpropagation","softplusActivation","penalty","pow","sqrt","dot","Array","i","subtract","fillRandom","parameter","random","fillZeros","logMinusOne","addNumber","transpose","currentComputation","addKernel","name","func","this","kernels","args","apply","getComputation","resize","generateData","arr","test","String","Number","t","push","newData","from","execute","maxIndex","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","fraction","_row","abs","numberOfElements","min","shape","cb","divide","rowwiseSum","replicate","undefined","length","Dataset","exampleSize","numberOfExamples","NaN","index","offset","batchSize","block","fromMatrix","column","size","oldData","copy","instance","DatasetBuilder","sourcePromise","params","Promise","resolve","then","source","matrix","parse","dataset","DatasetVocabulary","str","toLowerCase","chars","Set","split","sort","dataSize","vocabularySize","replace","map","example","result","forEach","char","tx","stride","X","Y","substr","x","getCharIndices","y","setZeros","sentence","_m","exampleIndex","getExamples","ch","DatasetVocabularyBuilder","AbstractDatasetBuilderSource","require","CSVState","DatasetBuilderSourceCSV","path","csvtojson","noheader","fromFile","DatasetVocabularyBuilderSourceTextFile","reject","fs","err","buffer","toString","AbstractDatasetModifier","CallbackDatasetModifier","getNumberOfExamples","callback","exampleAt","MinMaxScalingDatasetModifier","Infinity","MissingDataScalingDatasetModifier","rowsToFill","correctExamplesCount","valueToFill","getExampleSize","isNaN","modificationType","type","ShuffleDatasetModifier","exampleA","exampleB","sortList","DatasetBuilderBuilder","DatasetDataset","DatasetModifier","CategoryDatasetModifier","columns","_dataset","applyForColumn","_size","values","console","filter","self","indexOf","insertColumnAfter","oldValue","DatasetBuilderSource"],"sourceRoot":""}